{"ast":null,"code":"var _jsxFileName = \"/Users/Emi_Yoda/Desktop/photoDB/client/src/context/useBreakpoint.js\";\nimport React, { useState, useEffect, createContext, useContext } from \"react\";\nconst defaultValue = {};\nconst BreakpointContext = createContext(defaultValue);\n\nconst BreakpointProvider = ({\n  children,\n  queries\n}) => {\n  const [queryMatch, setQueryMatch] = useState({});\n  useEffect(() => {\n    const mediaQueryLists = {};\n    const keys = Object.keys(queries);\n    let isAttached = false;\n\n    const handleQueryListener = () => {\n      const updatedMatches = keys.reduce((acc, media) => {\n        acc[media] = !!(mediaQueryLists[media] && mediaQueryLists[media].matches);\n        return acc;\n      }, {});\n      setQueryMatch(updatedMatches);\n    };\n\n    if (window && window.matchMedia) {\n      const matches = {};\n      keys.forEach(media => {\n        if (typeof queries[media] === \"string\") {\n          mediaQueryLists[media] = window.matchMedia(queries[media]);\n          matches[media] = mediaQueryLists[media].matches;\n        } else {\n          matches[media] = false;\n        }\n      });\n      setQueryMatch(matches);\n      isAttached = true;\n      keys.forEach(media => {\n        if (typeof queries[media] === \"string\") {\n          mediaQueryLists[media].addListener(handleQueryListener);\n        }\n      });\n    }\n\n    return () => {\n      if (isAttached) {\n        keys.forEach(media => {\n          if (typeof queries[media] === \"string\") {\n            mediaQueryLists[media].removeListener(handleQueryListener);\n          }\n        });\n      }\n    };\n  }, [queries]);\n  return /*#__PURE__*/React.createElement(BreakpointContext.Provider, {\n    value: queryMatch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nfunction useBreakpoint() {\n  const context = useContext(BreakpointContext);\n\n  if (context === defaultValue) {\n    throw new Error(\"useBreakpoint must be used within BreakpointProvider\");\n  }\n\n  return context;\n}\n\nexport { useBreakpoint, BreakpointProvider };","map":{"version":3,"sources":["/Users/Emi_Yoda/Desktop/photoDB/client/src/context/useBreakpoint.js"],"names":["React","useState","useEffect","createContext","useContext","defaultValue","BreakpointContext","BreakpointProvider","children","queries","queryMatch","setQueryMatch","mediaQueryLists","keys","Object","isAttached","handleQueryListener","updatedMatches","reduce","acc","media","matches","window","matchMedia","forEach","addListener","removeListener","useBreakpoint","context","Error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,aAArC,EAAoDC,UAApD,QAAsE,OAAtE;AAEA,MAAMC,YAAY,GAAG,EAArB;AAEA,MAAMC,iBAAiB,GAAGH,aAAa,CAACE,YAAD,CAAvC;;AAEA,MAAME,kBAAkB,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA2B;AACpD,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,EAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,eAAe,GAAG,EAAxB;AACA,UAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYJ,OAAZ,CAAb;AACA,QAAIM,UAAU,GAAG,KAAjB;;AAEA,UAAMC,mBAAmB,GAAG,MAAM;AAChC,YAAMC,cAAc,GAAGJ,IAAI,CAACK,MAAL,CAAY,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACjDD,QAAAA,GAAG,CAACC,KAAD,CAAH,GAAa,CAAC,EACZR,eAAe,CAACQ,KAAD,CAAf,IAA0BR,eAAe,CAACQ,KAAD,CAAf,CAAuBC,OADrC,CAAd;AAGA,eAAOF,GAAP;AACD,OALsB,EAKpB,EALoB,CAAvB;AAMAR,MAAAA,aAAa,CAACM,cAAD,CAAb;AACD,KARD;;AAUA,QAAIK,MAAM,IAAIA,MAAM,CAACC,UAArB,EAAiC;AAC/B,YAAMF,OAAO,GAAG,EAAhB;AACAR,MAAAA,IAAI,CAACW,OAAL,CAAcJ,KAAD,IAAW;AACtB,YAAI,OAAOX,OAAO,CAACW,KAAD,CAAd,KAA0B,QAA9B,EAAwC;AACtCR,UAAAA,eAAe,CAACQ,KAAD,CAAf,GAAyBE,MAAM,CAACC,UAAP,CAAkBd,OAAO,CAACW,KAAD,CAAzB,CAAzB;AACAC,UAAAA,OAAO,CAACD,KAAD,CAAP,GAAiBR,eAAe,CAACQ,KAAD,CAAf,CAAuBC,OAAxC;AACD,SAHD,MAGO;AACLA,UAAAA,OAAO,CAACD,KAAD,CAAP,GAAiB,KAAjB;AACD;AACF,OAPD;AAQAT,MAAAA,aAAa,CAACU,OAAD,CAAb;AACAN,MAAAA,UAAU,GAAG,IAAb;AACAF,MAAAA,IAAI,CAACW,OAAL,CAAcJ,KAAD,IAAW;AACtB,YAAI,OAAOX,OAAO,CAACW,KAAD,CAAd,KAA0B,QAA9B,EAAwC;AACtCR,UAAAA,eAAe,CAACQ,KAAD,CAAf,CAAuBK,WAAvB,CAAmCT,mBAAnC;AACD;AACF,OAJD;AAKD;;AAED,WAAO,MAAM;AACX,UAAID,UAAJ,EAAgB;AACdF,QAAAA,IAAI,CAACW,OAAL,CAAcJ,KAAD,IAAW;AACtB,cAAI,OAAOX,OAAO,CAACW,KAAD,CAAd,KAA0B,QAA9B,EAAwC;AACtCR,YAAAA,eAAe,CAACQ,KAAD,CAAf,CAAuBM,cAAvB,CAAsCV,mBAAtC;AACD;AACF,SAJD;AAKD;AACF,KARD;AASD,GA3CQ,EA2CN,CAACP,OAAD,CA3CM,CAAT;AA6CA,sBACE,oBAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAEC,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,QADH,CADF;AAKD,CArDD;;AAuDA,SAASmB,aAAT,GAAyB;AACvB,QAAMC,OAAO,GAAGxB,UAAU,CAACE,iBAAD,CAA1B;;AACA,MAAIsB,OAAO,KAAKvB,YAAhB,EAA8B;AAC5B,UAAM,IAAIwB,KAAJ,CAAU,sDAAV,CAAN;AACD;;AACD,SAAOD,OAAP;AACD;;AACD,SAASD,aAAT,EAAwBpB,kBAAxB","sourcesContent":["import React, { useState, useEffect, createContext, useContext } from \"react\";\n\nconst defaultValue = {};\n\nconst BreakpointContext = createContext(defaultValue);\n\nconst BreakpointProvider = ({ children, queries }) => {\n  const [queryMatch, setQueryMatch] = useState({});\n\n  useEffect(() => {\n    const mediaQueryLists = {};\n    const keys = Object.keys(queries);\n    let isAttached = false;\n\n    const handleQueryListener = () => {\n      const updatedMatches = keys.reduce((acc, media) => {\n        acc[media] = !!(\n          mediaQueryLists[media] && mediaQueryLists[media].matches\n        );\n        return acc;\n      }, {});\n      setQueryMatch(updatedMatches);\n    };\n\n    if (window && window.matchMedia) {\n      const matches = {};\n      keys.forEach((media) => {\n        if (typeof queries[media] === \"string\") {\n          mediaQueryLists[media] = window.matchMedia(queries[media]);\n          matches[media] = mediaQueryLists[media].matches;\n        } else {\n          matches[media] = false;\n        }\n      });\n      setQueryMatch(matches);\n      isAttached = true;\n      keys.forEach((media) => {\n        if (typeof queries[media] === \"string\") {\n          mediaQueryLists[media].addListener(handleQueryListener);\n        }\n      });\n    }\n\n    return () => {\n      if (isAttached) {\n        keys.forEach((media) => {\n          if (typeof queries[media] === \"string\") {\n            mediaQueryLists[media].removeListener(handleQueryListener);\n          }\n        });\n      }\n    };\n  }, [queries]);\n\n  return (\n    <BreakpointContext.Provider value={queryMatch}>\n      {children}\n    </BreakpointContext.Provider>\n  );\n};\n\nfunction useBreakpoint() {\n  const context = useContext(BreakpointContext);\n  if (context === defaultValue) {\n    throw new Error(\"useBreakpoint must be used within BreakpointProvider\");\n  }\n  return context;\n}\nexport { useBreakpoint, BreakpointProvider };\n"]},"metadata":{},"sourceType":"module"}