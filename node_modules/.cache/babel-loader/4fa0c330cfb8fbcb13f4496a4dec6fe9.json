{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar shared = require('@react-spring/shared');\n\nvar _inheritsLoose = _interopDefault(require('@babel/runtime/helpers/inheritsLoose'));\n\nvar _assertThisInitialized = _interopDefault(require('@babel/runtime/helpers/assertThisInitialized'));\n\nvar _extends = _interopDefault(require('@babel/runtime/helpers/extends'));\n\nvar G = require('@react-spring/shared/globals');\n\nvar React = require('react');\n\nvar reactLayoutEffect = require('react-layout-effect');\n\nvar $node = Symbol[\"for\"]('Animated:node');\n\nvar isAnimated = function isAnimated(value) {\n  return !!value && value[$node] === value;\n};\n/** Get the owner's `Animated` node. */\n\n\nvar getAnimated = function getAnimated(owner) {\n  return owner && owner[$node];\n};\n/** Set the owner's `Animated` node. */\n\n\nvar setAnimated = function setAnimated(owner, node) {\n  return shared.defineHidden(owner, $node, node);\n};\n/** Get every `AnimatedValue` in the owner's `Animated` node. */\n\n\nvar getPayload = function getPayload(owner) {\n  return owner && owner[$node] && owner[$node].getPayload();\n};\n\nvar Animated = /*#__PURE__*/function () {\n  /** The cache of animated values */\n  function Animated() {\n    this.payload = void 0; // This makes \"isAnimated\" return true.\n\n    setAnimated(this, this);\n  }\n  /** Get the current value. Pass `true` for only animated values. */\n\n\n  var _proto = Animated.prototype;\n  /** Get every `AnimatedValue` used by this node. */\n\n  _proto.getPayload = function getPayload() {\n    return this.payload || [];\n  };\n\n  return Animated;\n}();\n/** An animated number or a native attribute value */\n\n\nvar AnimatedValue = /*#__PURE__*/function (_Animated) {\n  _inheritsLoose(AnimatedValue, _Animated);\n\n  function AnimatedValue(_value) {\n    var _this;\n\n    _this = _Animated.call(this) || this;\n    _this._value = _value;\n    _this.done = true;\n    _this.elapsedTime = void 0;\n    _this.lastPosition = void 0;\n    _this.lastVelocity = void 0;\n    _this.v0 = void 0;\n\n    if (shared.is.num(_this._value)) {\n      _this.lastPosition = _this._value;\n    }\n\n    return _this;\n  }\n\n  AnimatedValue.create = function create(from, _to) {\n    return new AnimatedValue(from);\n  };\n\n  var _proto = AnimatedValue.prototype;\n\n  _proto.getPayload = function getPayload() {\n    return [this];\n  };\n\n  _proto.getValue = function getValue() {\n    return this._value;\n  }\n  /**\n   * Set the current value and optionally round it.\n   *\n   * The `step` argument does nothing whenever it equals `undefined` or `0`.\n   * It works with fractions and whole numbers. The best use case is (probably)\n   * rounding to the pixel grid with a step of:\n   *\n   *      1 / window.devicePixelRatio\n   */\n  ;\n\n  _proto.setValue = function setValue(value, step) {\n    if (shared.is.num(value)) {\n      this.lastPosition = value;\n\n      if (step) {\n        value = Math.round(value / step) * step;\n\n        if (this.done) {\n          this.lastPosition = value;\n        }\n      }\n    }\n\n    if (this._value === value) {\n      return false;\n    }\n\n    this._value = value;\n    return true;\n  };\n\n  _proto.reset = function reset() {\n    var done = this.done;\n    this.done = false;\n\n    if (shared.is.num(this._value)) {\n      this.elapsedTime = 0;\n      this.lastPosition = this._value;\n      if (done) this.lastVelocity = null;\n      this.v0 = null;\n    }\n  };\n\n  return AnimatedValue;\n}(Animated);\n\nvar AnimatedString = /*#__PURE__*/function (_AnimatedValue) {\n  _inheritsLoose(AnimatedString, _AnimatedValue);\n\n  function AnimatedString(from, to) {\n    var _this;\n\n    _this = _AnimatedValue.call(this, 0) || this;\n    _this._value = void 0;\n    _this._string = null;\n    _this._toString = void 0;\n    _this._toString = shared.createInterpolator({\n      output: [from, to]\n    });\n    return _this;\n  }\n\n  AnimatedString.create = function create(from, to) {\n    if (to === void 0) {\n      to = from;\n    }\n\n    if (shared.is.str(from) && shared.is.str(to)) {\n      return new AnimatedString(from, to);\n    }\n\n    throw TypeError('Expected \"from\" and \"to\" to be strings');\n  };\n\n  var _proto = AnimatedString.prototype;\n\n  _proto.getValue = function getValue() {\n    var value = this._string;\n    return value == null ? this._string = this._toString(this._value) : value;\n  };\n\n  _proto.setValue = function setValue(value) {\n    if (!shared.is.num(value)) {\n      this._string = value;\n      this._value = 1;\n    } else if (_AnimatedValue.prototype.setValue.call(this, value)) {\n      this._string = null;\n    } else {\n      return false;\n    }\n\n    return true;\n  };\n\n  _proto.reset = function reset(goal) {\n    if (goal) {\n      this._toString = shared.createInterpolator({\n        output: [this.getValue(), goal]\n      });\n    }\n\n    this._value = 0;\n\n    _AnimatedValue.prototype.reset.call(this);\n  };\n\n  return AnimatedString;\n}(AnimatedValue);\n\nvar TreeContext = {\n  current: null\n};\n/** An object containing `Animated` nodes */\n\nvar AnimatedObject = /*#__PURE__*/function (_Animated) {\n  _inheritsLoose(AnimatedObject, _Animated);\n\n  function AnimatedObject(source) {\n    var _this;\n\n    if (source === void 0) {\n      source = null;\n    }\n\n    _this = _Animated.call(this) || this;\n    _this.source = void 0;\n\n    _this.setValue(source);\n\n    return _this;\n  }\n\n  var _proto = AnimatedObject.prototype;\n\n  _proto.getValue = function getValue(animated) {\n    if (!this.source) return null;\n    var values = {};\n    shared.each(this.source, function (source, key) {\n      if (isAnimated(source)) {\n        values[key] = source.getValue(animated);\n      } else {\n        var config = shared.getFluidConfig(source);\n\n        if (config) {\n          values[key] = config.get();\n        } else if (!animated) {\n          values[key] = source;\n        }\n      }\n    });\n    return values;\n  }\n  /** Replace the raw object data */\n  ;\n\n  _proto.setValue = function setValue(source) {\n    this.source = source;\n    this.payload = this._makePayload(source);\n  };\n\n  _proto.reset = function reset() {\n    if (this.payload) {\n      shared.each(this.payload, function (node) {\n        return node.reset();\n      });\n    }\n  }\n  /** Create a payload set. */\n  ;\n\n  _proto._makePayload = function _makePayload(source) {\n    if (source) {\n      var payload = new Set();\n      shared.each(source, this._addToPayload, payload);\n      return Array.from(payload);\n    }\n  }\n  /** Add to a payload set. */\n  ;\n\n  _proto._addToPayload = function _addToPayload(source) {\n    var _this2 = this;\n\n    var config = shared.getFluidConfig(source);\n\n    if (config && TreeContext.current) {\n      TreeContext.current.dependencies.add(source);\n    }\n\n    var payload = getPayload(source);\n\n    if (payload) {\n      shared.each(payload, function (node) {\n        return _this2.add(node);\n      });\n    }\n  };\n\n  return AnimatedObject;\n}(Animated);\n/** An array of animated nodes */\n\n\nvar AnimatedArray = /*#__PURE__*/function (_AnimatedObject) {\n  _inheritsLoose(AnimatedArray, _AnimatedObject);\n\n  function AnimatedArray(from, to) {\n    var _this;\n\n    _this = _AnimatedObject.call(this, null) || this;\n    _this.source = void 0;\n\n    _AnimatedObject.prototype.setValue.call(_assertThisInitialized(_this), _this._makeAnimated(from, to));\n\n    return _this;\n  }\n\n  AnimatedArray.create = function create(from, to) {\n    return new AnimatedArray(from, to);\n  };\n\n  var _proto = AnimatedArray.prototype;\n\n  _proto.getValue = function getValue() {\n    return this.source.map(function (node) {\n      return node.getValue();\n    });\n  };\n\n  _proto.setValue = function setValue(newValue) {\n    var payload = this.getPayload(); // Reuse the payload when lengths are equal.\n\n    if (newValue && newValue.length == payload.length) {\n      shared.each(payload, function (node, i) {\n        return node.setValue(newValue[i]);\n      });\n    } else {\n      // Remake the payload when length changes.\n      this.source = this._makeAnimated(newValue);\n      this.payload = this._makePayload(this.source);\n    }\n  }\n  /** Convert the `from` and `to` values to an array of `Animated` nodes */\n  ;\n\n  _proto._makeAnimated = function _makeAnimated(from, to) {\n    if (to === void 0) {\n      to = from;\n    }\n\n    return from ? from.map(function (from, i) {\n      return (shared.isAnimatedString(from) ? AnimatedString : AnimatedValue).create(from, to[i]);\n    }) : [];\n  };\n\n  return AnimatedArray;\n}(AnimatedObject);\n\nvar AnimatedProps = /*#__PURE__*/function (_AnimatedObject) {\n  _inheritsLoose(AnimatedProps, _AnimatedObject);\n  /** Equals true when an update is scheduled for \"end of frame\" */\n\n\n  function AnimatedProps(update) {\n    var _this;\n\n    _this = _AnimatedObject.call(this, null) || this;\n    _this.update = update;\n    _this.dirty = false;\n    return _this;\n  }\n\n  var _proto = AnimatedProps.prototype;\n\n  _proto.setValue = function setValue(props, context) {\n    if (!props) return; // The constructor passes null.\n\n    if (context) {\n      TreeContext.current = context;\n\n      if (props.style) {\n        var createAnimatedStyle = context.host.createAnimatedStyle;\n        props = _extends(_extends({}, props), {}, {\n          style: createAnimatedStyle(props.style)\n        });\n      }\n    }\n\n    _AnimatedObject.prototype.setValue.call(this, props);\n\n    TreeContext.current = null;\n  }\n  /** @internal */\n  ;\n\n  _proto.onParentChange = function onParentChange(_ref) {\n    var _this2 = this;\n\n    var type = _ref.type;\n\n    if (!this.dirty && type === 'change') {\n      this.dirty = true;\n      G.frameLoop.onFrame(function () {\n        _this2.dirty = false;\n\n        _this2.update();\n      });\n    }\n  };\n\n  return AnimatedProps;\n}(AnimatedObject);\n\nvar withAnimated = function withAnimated(Component, host) {\n  return React.forwardRef(function (rawProps, ref) {\n    var instanceRef = React.useRef(null);\n    var hasInstance = // Function components must use \"forwardRef\" to avoid being\n    // re-rendered on every animation frame.\n    !shared.is.fun(Component) || Component.prototype && Component.prototype.isReactComponent;\n    var forceUpdate = shared.useForceUpdate();\n    var props = new AnimatedProps(function () {\n      var instance = instanceRef.current;\n\n      if (hasInstance && !instance) {\n        return; // The wrapped component forgot to forward its ref.\n      }\n\n      var didUpdate = instance ? host.applyAnimatedValues(instance, props.getValue(true)) : false; // Re-render the component when native updates fail.\n\n      if (didUpdate === false) {\n        forceUpdate();\n      }\n    });\n    var dependencies = new Set();\n    props.setValue(rawProps, {\n      dependencies: dependencies,\n      host: host\n    });\n    reactLayoutEffect.useLayoutEffect(function () {\n      shared.each(dependencies, function (dep) {\n        return dep.addChild(props);\n      });\n      return function () {\n        return shared.each(dependencies, function (dep) {\n          return dep.removeChild(props);\n        });\n      };\n    });\n    return /*#__PURE__*/React.createElement(Component, _extends({}, host.getComponentProps(props.getValue()), {\n      ref: hasInstance && function (value) {\n        instanceRef.current = updateRef(ref, value);\n      }\n    }));\n  });\n};\n\nfunction updateRef(ref, value) {\n  if (ref) {\n    if (shared.is.fun(ref)) ref(value);else ref.current = value;\n  }\n\n  return value;\n} // For storing the animated version on the original component\n\n\nvar cacheKey = Symbol[\"for\"]('AnimatedComponent');\n\nvar createHost = function createHost(components, _temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$applyAnimatedVal = _ref.applyAnimatedValues,\n      applyAnimatedValues = _ref$applyAnimatedVal === void 0 ? function () {\n    return false;\n  } : _ref$applyAnimatedVal,\n      _ref$createAnimatedSt = _ref.createAnimatedStyle,\n      createAnimatedStyle = _ref$createAnimatedSt === void 0 ? function (style) {\n    return new AnimatedObject(style);\n  } : _ref$createAnimatedSt,\n      _ref$getComponentProp = _ref.getComponentProps,\n      getComponentProps = _ref$getComponentProp === void 0 ? function (props) {\n    return props;\n  } : _ref$getComponentProp;\n\n  var hostConfig = {\n    applyAnimatedValues: applyAnimatedValues,\n    createAnimatedStyle: createAnimatedStyle,\n    getComponentProps: getComponentProps\n  };\n\n  var animated = function animated(Component) {\n    var displayName = getDisplayName(Component) || 'Anonymous';\n\n    if (shared.is.str(Component)) {\n      Component = withAnimated(Component, hostConfig);\n    } else {\n      Component = Component[cacheKey] || (Component[cacheKey] = withAnimated(Component, hostConfig));\n    }\n\n    Component.displayName = \"Animated(\" + displayName + \")\";\n    return Component;\n  };\n\n  shared.each(components, function (Component, key) {\n    if (!shared.is.str(key)) {\n      key = getDisplayName(Component);\n    }\n\n    animated[key] = animated(Component);\n  });\n  return {\n    animated: animated\n  };\n};\n\nvar getDisplayName = function getDisplayName(arg) {\n  return shared.is.str(arg) ? arg : arg && shared.is.str(arg.displayName) ? arg.displayName : shared.is.fun(arg) && arg.name || null;\n};\n\nexports.Animated = Animated;\nexports.AnimatedArray = AnimatedArray;\nexports.AnimatedObject = AnimatedObject;\nexports.AnimatedProps = AnimatedProps;\nexports.AnimatedString = AnimatedString;\nexports.AnimatedValue = AnimatedValue;\nexports.createHost = createHost;\nexports.getAnimated = getAnimated;\nexports.getPayload = getPayload;\nexports.isAnimated = isAnimated;\nexports.setAnimated = setAnimated;","map":{"version":3,"sources":["src/Animated.ts","src/AnimatedValue.ts","src/AnimatedString.ts","src/context.ts","src/AnimatedObject.ts","src/AnimatedArray.ts","src/AnimatedProps.ts","src/withAnimated.tsx","src/createHost.ts"],"names":["$node","Symbol","isAnimated","value","getAnimated","owner","setAnimated","defineHidden","getPayload","Animated","payload","AnimatedValue","done","elapsedTime","lastPosition","lastVelocity","v0","_value","is","getValue","setValue","Math","reset","AnimatedString","_string","_toString","createInterpolator","output","to","from","TypeError","TreeContext","current","AnimatedObject","source","values","each","config","getFluidConfig","node","Array","AnimatedArray","newValue","isAnimatedString","AnimatedProps","dirty","update","props","createAnimatedStyle","context","style","onParentChange","type","G","withAnimated","forwardRef","instanceRef","useRef","hasInstance","Component","forceUpdate","useForceUpdate","instance","didUpdate","host","dependencies","useLayoutEffect","dep","updateRef","ref","cacheKey","createHost","applyAnimatedValues","getComponentProps","hostConfig","animated","displayName","getDisplayName","key","arg"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar shared = require('@react-spring/shared');\nvar _inheritsLoose = _interopDefault(require('@babel/runtime/helpers/inheritsLoose'));\nvar _assertThisInitialized = _interopDefault(require('@babel/runtime/helpers/assertThisInitialized'));\nvar _extends = _interopDefault(require('@babel/runtime/helpers/extends'));\nvar G = require('@react-spring/shared/globals');\nvar React = require('react');\nvar reactLayoutEffect = require('react-layout-effect');\n\nvar $node = Symbol[\"for\"]('Animated:node');\nvar isAnimated = function isAnimated(value) {\n  return !!value && value[$node] === value;\n};\n/** Get the owner's `Animated` node. */\n\nvar getAnimated = function getAnimated(owner) {\n  return owner && owner[$node];\n};\n/** Set the owner's `Animated` node. */\n\nvar setAnimated = function setAnimated(owner, node) {\n  return shared.defineHidden(owner, $node, node);\n};\n/** Get every `AnimatedValue` in the owner's `Animated` node. */\n\nvar getPayload = function getPayload(owner) {\n  return owner && owner[$node] && owner[$node].getPayload();\n};\nvar Animated = /*#__PURE__*/function () {\n  /** The cache of animated values */\n  function Animated() {\n    this.payload = void 0;\n    // This makes \"isAnimated\" return true.\n    setAnimated(this, this);\n  }\n  /** Get the current value. Pass `true` for only animated values. */\n\n\n  var _proto = Animated.prototype;\n\n  /** Get every `AnimatedValue` used by this node. */\n  _proto.getPayload = function getPayload() {\n    return this.payload || [];\n  };\n\n  return Animated;\n}();\n\n/** An animated number or a native attribute value */\n\nvar AnimatedValue = /*#__PURE__*/function (_Animated) {\n  _inheritsLoose(AnimatedValue, _Animated);\n\n  function AnimatedValue(_value) {\n    var _this;\n\n    _this = _Animated.call(this) || this;\n    _this._value = _value;\n    _this.done = true;\n    _this.elapsedTime = void 0;\n    _this.lastPosition = void 0;\n    _this.lastVelocity = void 0;\n    _this.v0 = void 0;\n\n    if (shared.is.num(_this._value)) {\n      _this.lastPosition = _this._value;\n    }\n\n    return _this;\n  }\n\n  AnimatedValue.create = function create(from, _to) {\n    return new AnimatedValue(from);\n  };\n\n  var _proto = AnimatedValue.prototype;\n\n  _proto.getPayload = function getPayload() {\n    return [this];\n  };\n\n  _proto.getValue = function getValue() {\n    return this._value;\n  }\n  /**\n   * Set the current value and optionally round it.\n   *\n   * The `step` argument does nothing whenever it equals `undefined` or `0`.\n   * It works with fractions and whole numbers. The best use case is (probably)\n   * rounding to the pixel grid with a step of:\n   *\n   *      1 / window.devicePixelRatio\n   */\n  ;\n\n  _proto.setValue = function setValue(value, step) {\n    if (shared.is.num(value)) {\n      this.lastPosition = value;\n\n      if (step) {\n        value = Math.round(value / step) * step;\n\n        if (this.done) {\n          this.lastPosition = value;\n        }\n      }\n    }\n\n    if (this._value === value) {\n      return false;\n    }\n\n    this._value = value;\n    return true;\n  };\n\n  _proto.reset = function reset() {\n    var done = this.done;\n    this.done = false;\n\n    if (shared.is.num(this._value)) {\n      this.elapsedTime = 0;\n      this.lastPosition = this._value;\n      if (done) this.lastVelocity = null;\n      this.v0 = null;\n    }\n  };\n\n  return AnimatedValue;\n}(Animated);\n\nvar AnimatedString = /*#__PURE__*/function (_AnimatedValue) {\n  _inheritsLoose(AnimatedString, _AnimatedValue);\n\n  function AnimatedString(from, to) {\n    var _this;\n\n    _this = _AnimatedValue.call(this, 0) || this;\n    _this._value = void 0;\n    _this._string = null;\n    _this._toString = void 0;\n    _this._toString = shared.createInterpolator({\n      output: [from, to]\n    });\n    return _this;\n  }\n\n  AnimatedString.create = function create(from, to) {\n    if (to === void 0) {\n      to = from;\n    }\n\n    if (shared.is.str(from) && shared.is.str(to)) {\n      return new AnimatedString(from, to);\n    }\n\n    throw TypeError('Expected \"from\" and \"to\" to be strings');\n  };\n\n  var _proto = AnimatedString.prototype;\n\n  _proto.getValue = function getValue() {\n    var value = this._string;\n    return value == null ? this._string = this._toString(this._value) : value;\n  };\n\n  _proto.setValue = function setValue(value) {\n    if (!shared.is.num(value)) {\n      this._string = value;\n      this._value = 1;\n    } else if (_AnimatedValue.prototype.setValue.call(this, value)) {\n      this._string = null;\n    } else {\n      return false;\n    }\n\n    return true;\n  };\n\n  _proto.reset = function reset(goal) {\n    if (goal) {\n      this._toString = shared.createInterpolator({\n        output: [this.getValue(), goal]\n      });\n    }\n\n    this._value = 0;\n\n    _AnimatedValue.prototype.reset.call(this);\n  };\n\n  return AnimatedString;\n}(AnimatedValue);\n\nvar TreeContext = {\n  current: null\n};\n\n/** An object containing `Animated` nodes */\nvar AnimatedObject = /*#__PURE__*/function (_Animated) {\n  _inheritsLoose(AnimatedObject, _Animated);\n\n  function AnimatedObject(source) {\n    var _this;\n\n    if (source === void 0) {\n      source = null;\n    }\n\n    _this = _Animated.call(this) || this;\n    _this.source = void 0;\n\n    _this.setValue(source);\n\n    return _this;\n  }\n\n  var _proto = AnimatedObject.prototype;\n\n  _proto.getValue = function getValue(animated) {\n    if (!this.source) return null;\n    var values = {};\n    shared.each(this.source, function (source, key) {\n      if (isAnimated(source)) {\n        values[key] = source.getValue(animated);\n      } else {\n        var config = shared.getFluidConfig(source);\n\n        if (config) {\n          values[key] = config.get();\n        } else if (!animated) {\n          values[key] = source;\n        }\n      }\n    });\n    return values;\n  }\n  /** Replace the raw object data */\n  ;\n\n  _proto.setValue = function setValue(source) {\n    this.source = source;\n    this.payload = this._makePayload(source);\n  };\n\n  _proto.reset = function reset() {\n    if (this.payload) {\n      shared.each(this.payload, function (node) {\n        return node.reset();\n      });\n    }\n  }\n  /** Create a payload set. */\n  ;\n\n  _proto._makePayload = function _makePayload(source) {\n    if (source) {\n      var payload = new Set();\n      shared.each(source, this._addToPayload, payload);\n      return Array.from(payload);\n    }\n  }\n  /** Add to a payload set. */\n  ;\n\n  _proto._addToPayload = function _addToPayload(source) {\n    var _this2 = this;\n\n    var config = shared.getFluidConfig(source);\n\n    if (config && TreeContext.current) {\n      TreeContext.current.dependencies.add(source);\n    }\n\n    var payload = getPayload(source);\n\n    if (payload) {\n      shared.each(payload, function (node) {\n        return _this2.add(node);\n      });\n    }\n  };\n\n  return AnimatedObject;\n}(Animated);\n\n/** An array of animated nodes */\nvar AnimatedArray = /*#__PURE__*/function (_AnimatedObject) {\n  _inheritsLoose(AnimatedArray, _AnimatedObject);\n\n  function AnimatedArray(from, to) {\n    var _this;\n\n    _this = _AnimatedObject.call(this, null) || this;\n    _this.source = void 0;\n\n    _AnimatedObject.prototype.setValue.call(_assertThisInitialized(_this), _this._makeAnimated(from, to));\n\n    return _this;\n  }\n\n  AnimatedArray.create = function create(from, to) {\n    return new AnimatedArray(from, to);\n  };\n\n  var _proto = AnimatedArray.prototype;\n\n  _proto.getValue = function getValue() {\n    return this.source.map(function (node) {\n      return node.getValue();\n    });\n  };\n\n  _proto.setValue = function setValue(newValue) {\n    var payload = this.getPayload(); // Reuse the payload when lengths are equal.\n\n    if (newValue && newValue.length == payload.length) {\n      shared.each(payload, function (node, i) {\n        return node.setValue(newValue[i]);\n      });\n    } else {\n      // Remake the payload when length changes.\n      this.source = this._makeAnimated(newValue);\n      this.payload = this._makePayload(this.source);\n    }\n  }\n  /** Convert the `from` and `to` values to an array of `Animated` nodes */\n  ;\n\n  _proto._makeAnimated = function _makeAnimated(from, to) {\n    if (to === void 0) {\n      to = from;\n    }\n\n    return from ? from.map(function (from, i) {\n      return (shared.isAnimatedString(from) ? AnimatedString : AnimatedValue).create(from, to[i]);\n    }) : [];\n  };\n\n  return AnimatedArray;\n}(AnimatedObject);\n\nvar AnimatedProps = /*#__PURE__*/function (_AnimatedObject) {\n  _inheritsLoose(AnimatedProps, _AnimatedObject);\n\n  /** Equals true when an update is scheduled for \"end of frame\" */\n  function AnimatedProps(update) {\n    var _this;\n\n    _this = _AnimatedObject.call(this, null) || this;\n    _this.update = update;\n    _this.dirty = false;\n    return _this;\n  }\n\n  var _proto = AnimatedProps.prototype;\n\n  _proto.setValue = function setValue(props, context) {\n    if (!props) return; // The constructor passes null.\n\n    if (context) {\n      TreeContext.current = context;\n\n      if (props.style) {\n        var createAnimatedStyle = context.host.createAnimatedStyle;\n        props = _extends(_extends({}, props), {}, {\n          style: createAnimatedStyle(props.style)\n        });\n      }\n    }\n\n    _AnimatedObject.prototype.setValue.call(this, props);\n\n    TreeContext.current = null;\n  }\n  /** @internal */\n  ;\n\n  _proto.onParentChange = function onParentChange(_ref) {\n    var _this2 = this;\n\n    var type = _ref.type;\n\n    if (!this.dirty && type === 'change') {\n      this.dirty = true;\n      G.frameLoop.onFrame(function () {\n        _this2.dirty = false;\n\n        _this2.update();\n      });\n    }\n  };\n\n  return AnimatedProps;\n}(AnimatedObject);\n\nvar withAnimated = function withAnimated(Component, host) {\n  return React.forwardRef(function (rawProps, ref) {\n    var instanceRef = React.useRef(null);\n    var hasInstance = // Function components must use \"forwardRef\" to avoid being\n    // re-rendered on every animation frame.\n    !shared.is.fun(Component) || Component.prototype && Component.prototype.isReactComponent;\n    var forceUpdate = shared.useForceUpdate();\n    var props = new AnimatedProps(function () {\n      var instance = instanceRef.current;\n\n      if (hasInstance && !instance) {\n        return; // The wrapped component forgot to forward its ref.\n      }\n\n      var didUpdate = instance ? host.applyAnimatedValues(instance, props.getValue(true)) : false; // Re-render the component when native updates fail.\n\n      if (didUpdate === false) {\n        forceUpdate();\n      }\n    });\n    var dependencies = new Set();\n    props.setValue(rawProps, {\n      dependencies: dependencies,\n      host: host\n    });\n    reactLayoutEffect.useLayoutEffect(function () {\n      shared.each(dependencies, function (dep) {\n        return dep.addChild(props);\n      });\n      return function () {\n        return shared.each(dependencies, function (dep) {\n          return dep.removeChild(props);\n        });\n      };\n    });\n    return /*#__PURE__*/React.createElement(Component, _extends({}, host.getComponentProps(props.getValue()), {\n      ref: hasInstance && function (value) {\n        instanceRef.current = updateRef(ref, value);\n      }\n    }));\n  });\n};\n\nfunction updateRef(ref, value) {\n  if (ref) {\n    if (shared.is.fun(ref)) ref(value);else ref.current = value;\n  }\n\n  return value;\n}\n\n// For storing the animated version on the original component\nvar cacheKey = Symbol[\"for\"]('AnimatedComponent');\nvar createHost = function createHost(components, _temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$applyAnimatedVal = _ref.applyAnimatedValues,\n      applyAnimatedValues = _ref$applyAnimatedVal === void 0 ? function () {\n    return false;\n  } : _ref$applyAnimatedVal,\n      _ref$createAnimatedSt = _ref.createAnimatedStyle,\n      createAnimatedStyle = _ref$createAnimatedSt === void 0 ? function (style) {\n    return new AnimatedObject(style);\n  } : _ref$createAnimatedSt,\n      _ref$getComponentProp = _ref.getComponentProps,\n      getComponentProps = _ref$getComponentProp === void 0 ? function (props) {\n    return props;\n  } : _ref$getComponentProp;\n\n  var hostConfig = {\n    applyAnimatedValues: applyAnimatedValues,\n    createAnimatedStyle: createAnimatedStyle,\n    getComponentProps: getComponentProps\n  };\n\n  var animated = function animated(Component) {\n    var displayName = getDisplayName(Component) || 'Anonymous';\n\n    if (shared.is.str(Component)) {\n      Component = withAnimated(Component, hostConfig);\n    } else {\n      Component = Component[cacheKey] || (Component[cacheKey] = withAnimated(Component, hostConfig));\n    }\n\n    Component.displayName = \"Animated(\" + displayName + \")\";\n    return Component;\n  };\n\n  shared.each(components, function (Component, key) {\n    if (!shared.is.str(key)) {\n      key = getDisplayName(Component);\n    }\n\n    animated[key] = animated(Component);\n  });\n  return {\n    animated: animated\n  };\n};\n\nvar getDisplayName = function getDisplayName(arg) {\n  return shared.is.str(arg) ? arg : arg && shared.is.str(arg.displayName) ? arg.displayName : shared.is.fun(arg) && arg.name || null;\n};\n\nexports.Animated = Animated;\nexports.AnimatedArray = AnimatedArray;\nexports.AnimatedObject = AnimatedObject;\nexports.AnimatedProps = AnimatedProps;\nexports.AnimatedString = AnimatedString;\nexports.AnimatedValue = AnimatedValue;\nexports.createHost = createHost;\nexports.getAnimated = getAnimated;\nexports.getPayload = getPayload;\nexports.isAnimated = isAnimated;\nexports.setAnimated = setAnimated;\n//# sourceMappingURL=index.cjs.js.map\n"]},"metadata":{},"sourceType":"script"}